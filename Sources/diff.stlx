// differentiate the term t with respect to the variable x
diff := procedure(t, x) {
    match (t) {
        case a + b :
            return diff(a, x) + diff(b, x);
        case a - b :
            return diff(a, x) - diff(b, x);
        case a * b :
            return diff(a, x) * b + a * diff(b, x);
        case a / b :
            return ( diff(a, x) * b - a * diff(b, x) ) / b * b;
        case a ** b :
            return diff( @exp(b * @ln(a)), x);
        case ln(a) :
            return diff(a, x) / a;
        case exp(a) :
            return diff(a, x) * @exp(a);
        case ^variable(x) :
            // x is defined above, therefore must be equal to match
            return 1;
        case ^variable(y) :
            // y is undefined, therefore matches any other variable
            return 0;
        case n | isNumber(n):   
            return 0;  
        default:
            abort("error");
    }
};

test := procedure(s) {
    t := parse(s);
    print("differentiating $t$:");
    d := diff(t, "x");
    print(d, "\n");
};

test("x");
test("y");
test("1");
test("x+x");
test("x+x+y");
test("x*x");
test("x/x");
test("1/x");
test("ln(x)");
test("exp(x)");
test("x ** x");

