// This procedure checks whether there is a prime between the numbers n ** 2 and (n+1) ** 2.
legendre := procedure(n) {
    k := n * n + 1;
    while (k < (n + 1) ** 2) {
        if (isPrime(k)) {
            return true;
        }
        k += 1;
    }
    return false;
};
/* First, we read a number n.  Next, we check whether Legendre's claim is true for this number.
   If its wrong, the function just returns and prints the counter example.  Otherwise, n is 
   incremented and we try to check, whether Legendre's claim is true for n+1.  As long
   as we do not find a counter example, we keep going.

   This example demonstrates that the question, whether a function loops is, in general,
   undecidable, since if this question was decidable, the procedure for deciding it would be able
   to solve open mathematical questions. 
*/
findCounterExample := procedure(n) {
    while (true) {
       if (legendre(n)) {
           print(n);
           n := n + 1;
       } else {
           print("Legendre was wrong, no prime between $n**2$ and $(n+1)**2$!");
           return;
       }
    }
};
findCounterExample(2);
