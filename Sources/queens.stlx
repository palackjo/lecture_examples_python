load("davis-putnam.stlx");
// s is a set of propositional variables. The call atMostOne(s) creates
// a set of clauses.  This set expresses the fact that at most one of
// the variables in s is true.
atMostOne := procedure(s) {
    return { { !p, !q } : p in s, q in s | p != q };
};
// This procedure computes a set of clauses.  This set of clauses is true
// iff there is at most one queen on the given row.
atMostOneInRow := procedure(row, n) {
    return atMostOne({ Var(row, column) : column in [1 .. n] });
};
// This procedure computes a set of clauses.  This set of clauses is true
// iff there is at least one queen on the given column.
oneInColumn := procedure(column, n) {
    return { { Var(row, column) : row in { 1 .. n } } };
};
// This procedure computes a set of clauses.  This set of clauses is true
// iff there is at most one queen on the diagonal satisfying the equation 
//    row + column = k.
atMostOneInUpperDiagonal := procedure(k, n) {
    s := { Var(r, c) : c in [1..n], r in [1..n] | r + c == k };
    return atMostOne(s);
};
// This procedure computes a set of clauses.  This set of clauses is true
// iff there is at most one queen on the diagonal satisfying the equation 
//    row - column = k.
atMostOneInLowerDiagonal := procedure(k, n) {
    s := { Var(r, c) : c in [1..n], r in [1..n] | r - c == k };
    return atMostOne(s);
};
// The procedure allClauses takes as input a matrix (i.e. a list of lists)
// of propositional variables.  Each of these variables represents a field
// of a chess board.  The variables express the fact that the corresponding
// field is occupied by a queen.
// The procedure computes as output a formula in KNF. This formula expresses
// the fact that no queen on the board threatens another queen, i.e. two
// queens are not
//             on the same row,    or
//             on the same column, or
//             on the same diagonal.
// Furthermore the formula guarantees that there is a queen in every row.
// The formula is represented as a set of clauses.  Each of the clauses
// is represented as a set of literals.
//
// In order to simplify the resulting formula, the following observation
// can be used:
// If there are no two queens on the same column and there is at least one
// queen in every row, then it follows that there is exactly one queen in
// every row, since otherwise there would be more than 8 queens on the board
// and that is only possible if there is one column containing more than one
// queen.
allClauses := procedure(n) {
    return   +/ { atMostOneInRow(row, n)         : row in {1..n}        }
           + +/ { atMostOneInLowerDiagonal(k, n) : k in {-(n-2) .. n-2} }
           + +/ { atMostOneInUpperDiagonal(k, n) : k in {3 .. 2*n - 1}  }
           + +/ { oneInColumn(column, n)         : column in {1 .. n}   };
};
// Solve the n-queens puzzle.
solve := procedure(n) {
    clauses  := allClauses(n);
    print(clauses);
    solution := davisPutnam(clauses, {});
    if (solution != { {} }) {
        // print(solution);
        printBoard(solution, n);
    } else {
        print("The problem is not solvable for $n$ queens!");
        print("Try to increase the number of queens.");
    }
};
// i is a set of unit clauses and board is a matrix of propositional 
// variables representing a chessboard.   This procedure prints the 
// chessboard.
printBoard := procedure(i, n) {
    if (i == { {} }) {
        return;
    }
    print( "        " + ((8*n+1) * "-") );
    for (row in [1..n]) {
        line := "        |";
        for (col in [1..n]) {
            line += "       |";
        }
        print(line);
        line := "        |";
        for (col in [1..n]) {
            if ({ Var(row, col) } in i) {
                line += "   Q   |";
            } else {
                line += "       |";
            }
        }
        print(line);
        line := "        |";
        for (col in [1..n]) {
            line += "       |";
        }
        print(line);
        print( "        " + ((8*n+1) * "-") );
    }
};
start := now();
solve(8);
stop  := now();
print("time: $stop - start$ milliseconds");


